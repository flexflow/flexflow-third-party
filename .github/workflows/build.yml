name: "build"
on:
  schedule:
    # Run daily at midnight ET (4am UTC)
    - cron: "0 4 * * *"
  workflow_dispatch:
  pull_request:
concurrency:
  group: build-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  build-dependencies:
    name: Build the FlexFlow dependencies
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        cuda_version:
          [
            "11.0.3",
            "11.1.1",
            "11.2.2",
            "11.3.1",
            "11.4.3",
            "11.5.2",
            "11.6.2",
            "11.7.0",
          ]
        #cuda_version: ["8.0.61", "9.2.148", "10.0.130", "10.1.243", "10.2.89", "11.0.3", "11.1.1", "11.2.2", "11.3.1", "11.4.3", "11.5.2", "11.6.2", "11.7.0"]
        dependency: ["nccl", "legion"]
      fail-fast: false
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install CUDA
        uses: Jimver/cuda-toolkit@v0.2.8
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda_version }}

      - name: Install Build Dependencies
        run: .github/workflows/helpers/install_dependencies.sh

      - name: Build NCCL/Legion
        env:
          DEPENDENCY: ${{ matrix.dependency }}
        run: |
          export PATH=/opt/conda/bin:$PATH
          export CUDNN_DIR=/usr/local/cuda
          export CUDA_DIR=/usr/local/cuda
          cores_available=$(nproc --all)
          n_build_cores=$(( cores_available -1 ))
          sed -i "/FF_CUDA_ARCH/c\FF_CUDA_ARCH=70" ./config/config.linux
          if [ "$DEPENDENCY" == "legion" ] ; then sed -i "/FF_BUILD_LEGION/c\FF_BUILD_LEGION=ON" ./config/config.linux ; fi
          if [ "$DEPENDENCY" == "nccl" ] ; then sed -i "/FF_USE_NCCL/c\FF_USE_NCCL=ON" ./config/config.linux ; fi
          mkdir build
          cd build
          ../config/config.linux
          make -j $n_build_cores

      - name: Archive compiled libraries / files / binaries
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.dependency }}_${{ matrix.cuda_version }}_ubuntu-20.04"
          path: build/deps/${{ matrix.dependency }}

  create-release:
    name: Create new release
    runs-on: ubuntu-20.04
    needs: build-dependencies
    steps:
      - name: Get datetime
        run: echo "RELEASE_DATETIME=$(date --iso-8601=minutes)" >> $GITHUB_ENV
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.RELEASE_DATETIME }}
          tag: ${{ env.RELEASE_DATETIME }}
          artifacts: "*"
          token: ${{ secrets.RELEASES_TOKEN }}
